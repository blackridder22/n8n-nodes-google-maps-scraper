aW1wb3J0IHsKICAgIElBdXRoZW50aWNhdGVHZW5lcmljLAogICAgSUNyZWRlbnRpYWxUZXN0UmVxdWVzdCwKICAgIElDcmVkZW50aWFsVHlwZSwKICAgIElOb2RlUHJvcGVydGllcSwKfSBmcm9tICduOG4td29ya2Zsb3cnOwoKZXhwb3J0IGNsYXNzIEdvb2dsZU1hcHNTY3JhcGVyQXBpIGltcGxlbWVudHMgSUNyZWRlbnRpYWxUeXBlIHsKICBuYW1lID0gJ2dvb2dsZU1hcHNTY3JhcGVyQXBpJzsKICBkaXNwbGF5TmFtZSA9ICdHb29nbGUgTWFwcyBTY3JhcGVyIEFQScnOwogIGRvY3VtZW50YXRpb25VcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL2Nvbm9yLWlzLW15LW5hbWUvZ29vZ2xlLW1hcHMtc2NyYXBlcic7CiAgcHJvcGVydGllczogSU5vZGVQcm9wZXJ0aWVzW10gPSBbCiAgICB7CiAgICAgIGRpc3BsYXlOYW1lOiAnVVJMJywKICAgICAgbmFtZTogJ3VybCcsCiAgICAgIHR5cGU6ICdzdHJpbmcnLAogICAgICBkZWZhdWx0OiAnaHR0cDovL2xvY2FsaG9zdDo4MDAxJywKICAgIH0sCiAgICB7CiAgICAgIGRpc3BsYXlOYW1lOiAnQVBJIEtleScsCiAgICAgIG5hbWU6ICdhcGlLZXknLAogICAgICB0eXBlOiAnc3RyaW5nJywKICAgICAgZGVmYXVsdDogJycsCiAgICAgIHR5cGVPcHRpb25zOiB7CiAgICAgICAgcGFzc3dvcmQ6IHRydWUsCiAgICAgIH0sCiAgICB9LAogIF07CgoJYXV0aGVudGljYXRlOiBJQXV0aGVudGljZUd lbmVyaWMgPSB7CiAgICAgIHR5cGU6ICduZW5lcmljJywKICAgICAgcHJvcGVydGllczogewogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICdYLUFQSS1LRVknOiAnPT17JCNjcmVkZW50aWFzLmFwaUtleX0nLAogICAgICAgIH0KICAgICAgfSwKICAgIH07CgogIHRlc3Q6IElDcmVkZW50aWFsVGVzdFJlcXVlc3QgPSB7CiAgICAgIHJlcXVlc3Q6IHsKICAgICAgICBiYXNlVUJMOiAnPT17JCNjcmVkZW50cy8udXJsfScsCiAgICAgICAgdXJsOiAnLycKICAgICAgfSwKICAgIH07Cn0K